#include <iostream>
using namespace std;
/**
*
* Solution to course project # 5
* Introduction to programming course
* Faculty of Mathematics and Informatics of Sofia University
* Winter semester 2023/2024
*
* @author Ekaterina Ivanova Stoyanova
* @idnumber 2MI0600285
* @compiler CLion
*
* <file with game>
*
*/

// правя глобална схема 11х11, за да краищата да са изпълнени с -1ци

const int MAX_SIZE = 10;
int board[MAX_SIZE+1][MAX_SIZE+1];//слагам го така, за да има някакъв контур
bool used [MAX_SIZE+1][MAX_SIZE+1];//тези матрици са запълнени първоначално с нули
bool markedMines [MAX_SIZE+1][MAX_SIZE+1]; // тук отбелязвам кои мини са маркирани

int row[] = {-1, -1, -1, 0,0, 1, 1, 1,}; //посоките
int col[] = {-1, 0, 1, -1, 1,-1, 0, 1,};

int opened;
int totalMines;



void createBorder (int N) {
    for ( int i = 0; i < N+1 ; i++ ) {
        board[0][i] = -1;
        board[i][0] = -1;
        board[N+1][i] = -1;
        board[i][N+1] = -1; //идеята е да стане рамка
    }
}

void createBoard () {
    for (int j = 0; j < MAX_SIZE + 1; j++) {
        for (int f = 0; f < MAX_SIZE + 1; f++) {
            board[j][f] = 0 ;
            used[j][f] = false ;
            markedMines[j][f] = false ;
        }
    }
}


//функция, която да пълни клетките спрямо броя им, подаден от потребителя
void fillBoardWithMines (int N, int& numberMines) {

    createBoard();

    opened = 0;
    totalMines = numberMines;

    createBorder(N);

    int mines = 0;
    srand(time(0)); // за да всеки път таблицата да е различна
    while (mines < numberMines){
        int x = rand() % N + 1; //+1 за да не са в рамката
        int y = rand() % N + 1;

        if(board[x][y] != 9) { //пазя мините като 9, тоест, ако на това място вече няма мина, слагам девятка
            board[x][y] = 9;

            //обхождаме съседите
            for(int i = 0; i < 8; ++i) {

                if(board[x + row[i]][y + col[i]] != -1 && board[x + row[i]][y + col[i]] != 9){
                    // ако не е граница, го увеличаваме с единица
                    board[x + row[i]][y + col[i]]++;
                }
            }
            mines++;
        }

    }
}

void printBoard(int N) {
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (used[i][j]) {

                if (markedMines[i][j]) {
                    cout << "@" << ' ';
                }
                else if(board[i][j] == 9) {
                        cout << "x" << ' ';
                } else if (board[i][j] != 9 && (!markedMines[i][j])){
                    cout << board[i][j] << ' ';
                }

            } else {
                cout << 'x' << ' ';
            }
        }
        cout << endl;
    }
}

int myStrcmp(const char* first, const char* second)
{
    if (!first || !second)
        return 0;
    while ((*first) && (*second) && ((*first) == (*second)))
    {
        first++;
        second++;
    }

    return (*first - *second);

}


bool validMove(int curRow, int curCol, int N) {
    if (curRow > N || curRow < 1 || curCol > N || curCol < 1 ) {
        return false;
    } else {
        return true;
    }
}

bool validCommand(char* command) {
    return (myStrcmp(command, "open") == 0 || myStrcmp(command, "mark") == 0 ||
            myStrcmp(command, "unmark") == 0);
}

void recursionNeighbours (int moveRow, int moveCol) {
    used[moveRow][moveCol] = true;
    opened++;
    //обикаляме съседите
    for (int i = 0; i < 8; ++i) {
        int newRow = moveRow + row[i];
        int newCol = moveCol + col[i];

        if (newRow >= 1 && newRow <= MAX_SIZE && newCol >= 1 && newCol <= MAX_SIZE &&
            !used[newRow][newCol]) {
            if (board[newRow][newCol] > 0 && board[newRow][newCol] < 9) {
                used[newRow][newCol] = true;
                opened++;
            } else if (board[newRow][newCol] == 0) {
                recursionNeighbours(newRow, newCol);
            }
        }
    }

}

void mark (int curRow, int curCol, int N) {
    used[curRow][curCol] = true;
    markedMines[curRow][curCol] = true;
    if (board[curRow][curCol] == 9) {
        totalMines--;

        if (totalMines == 0) {
            cout << " ********* ~ CONGRATULATIONS! ~ ********* " << endl;
            cout << "                 YOU WON                  " << endl;
            return;
        }

    } else {
        opened++;

    }
}

void unmark (int curRow, int curCol) {
    if (markedMines[curRow][curCol] && used[curRow][curCol] && board[curRow][curCol] == 9) {
        totalMines++;
    }
    used[curRow][curCol] = false;
    markedMines[curRow][curCol] = false;
}

int game (int N, int numberMines) {

    bool valid = false;
    int curRow;
    int curCol;

    const size_t command_lenght = 6;
    char command[command_lenght];


    while (!valid) {
        cout << "Enter your move (command: open/mark/unmark), (row[ 1 - " << N << "]), (column[ 1 - " << N << "]) : ";
        cin >> command >> curRow >> curCol;

        if((!(validCommand(command))) || (!(validMove(curRow, curCol, N)))) {
            cout << "Invalid move. Try again" << endl;
        }
        else {
            valid = true;
        }

    }

    if(myStrcmp(command, "open") == 0) {
        if( board[curRow][curCol] == 9 ) {
            cout << "You lost! Game over!" << endl;
            printBoard(N);
            return -1;
        } else if ( board[curRow][curCol] == 0 ){
            used[curRow][curCol] = true;
            opened++; //когато used=true увеличавам opened
            recursionNeighbours(curRow, curCol);
        } else {
            used[curRow][curCol] = true;
            opened++;
        }

    } else if (myStrcmp(command, "mark") == 0) {
            mark(curRow, curCol, N);
    }
    else if (myStrcmp (command, "unmark") == 0) {
        unmark(curRow, curCol);
    }

    printBoard(N);

    if (opened == (N*N - numberMines) ) {
        cout << " ********* ~ CONGRATULATIONS! ~ ********* " << endl;
        cout << "                 YOU WON                  " << endl;
        return -1;
    } else {
        return game(N, numberMines);
    }


}


int main() {


    cout << "(_)                                                  \n"
            " _ __ ___  _ _ __   ___  _____      _____  ___ _ __   ___ _ __ \n"
            "| '_ ` _ \\| | '_ \\ / _ \\/ __\\ \\ /\\ / / _ \\/ _ \\ '_ \\ / _ \\ '__|\n"
            "| | | | | | | | | |  __/\\__ \\\\ V  V /  __/  __/ |_) |  __/ |   \n"
            "|_| |_| |_|_|_| |_|\\___||___/ \\_/\\_/ \\___|\\___| .__/ \\___|_|   \n"
            "                                              | |              \n"
            "                                              |_|              " << endl;
    cout << endl << endl << endl;

    int N, numberMines;

    do {
        cout << "Enter the dimension of the board on which you wish to play: ";
        cin >> N;
    } while ( N < 3 || N > MAX_SIZE );

    do {
        cout << "Enter the number of mines that you wish to open: ";
        cin >> numberMines;
    } while ( numberMines < 1 || numberMines > 3*N );

    cout << "_____________________________________________" << endl;
    cout << "              NEW GAME BEGINS                " << endl;
    cout << "_____________________________________________" << endl;

    fillBoardWithMines(N, numberMines);
    printBoard(N);
    game(N, numberMines);

    return 0;

}
